@page "/PesquisaEmprestimo"
@using Negocio.Cadastro
@using Projeto_Contabilidade.Client.Componentes.Modal
@inject HttpClient httpClient
@inject NavigationManager NavigationManager;
@using Newtonsoft.Json

@if (loading)
{
    <h3 class="text-center">CARREGANDO ...</h3>
}
else
{
    <div class="d-flex w-100 justify-content-between">
        <h2 class="">Empréstimos Cadastrados</h2>
        <div style="width:250px" class="d-flex form-control">
            <span class="oi oi-magnifying-glass"></span>
            <input style="outline:0" type="text" placeholder="Pesquisa" class="w-100 h-100 border-0" />
        </div>
    </div>

    <table class="table table-hover">
        <tr>
            <th class="text-center">Info</th>
            <th>Efetivo</th>
            <th>Periodico</th>
            <th>Data Empréstimo</th>
            <th>Data Devolução</th>
            <th class="text-center">
                Ações
            </th>
        </tr>
        <tbody>
            @foreach (EmprestimoViewModel emprestimo in emprestimos)
            {
                <tr>
                    <td class="text-center">
                        <button @onclick=@(() => NavigationManager.NavigateTo($"CadastroEmprestimo/{emprestimo.codigo_Emprestimo}")) class="btn btn- btn-primary">
                            <span class="oi oi-info"></span>
                        </button>

                    </td>
                    <td>@emprestimo.Efetivo.nome</td>
                    <td>@emprestimo.Periodico.Nome</td>
                    <td>@emprestimo.data_Emprestimo</td>
                    <td>@emprestimo.data_Devolucao</td>
                    <td>
                        <div class="text-center">
                            <button @onclick=@(() => NavigationManager.NavigateTo($"CadastroEmprestimo/{emprestimo.codigo_Emprestimo}")) type="button" class="btn btn-outline-success">
                                Editar
                            </button>
                        </div>
                    </td>
                </tr>
            }
            <tr>
                <td colspan=5 class="text-center">
                    <button class="btn btn-outline-primary"
                        @onclick=@(() => NavigationManager.NavigateTo("CadastroEmprestimo"))>
                        Adicionar Empréstimo
                    </button>
                </td>
            </tr>
        </tbody>
    </table>
}

<Modal @ref="modal"></Modal>

@code {
    public bool loading = false;
    Modal modal = new Modal();
    List<EmprestimoViewModel> emprestimos = new List<EmprestimoViewModel>();
    public Emprestimo emprestimoObj = new Emprestimo();

    async protected override Task OnInitializedAsync()
    {
        await ListarEmprestimo();
        StateHasChanged();
    }

    protected async Task ListarEmprestimo()
    {
        try
        {
            loading = true;
            string url = $"https://localhost:44388/Emprestimo/Listar";
            var response = await httpClient.PostAsJsonAsync(url, emprestimoObj);
            if (response.IsSuccessStatusCode == true)
            {
                List<Emprestimo> emprestimosRetorno = JsonConvert.DeserializeObject<List<Emprestimo>>(await response.Content.ReadAsStringAsync());

                emprestimos.RemoveRange(0, emprestimos.Count);
                foreach (Emprestimo emprestimoRetorno in emprestimosRetorno)
                {
                    EmprestimoViewModel emprestimo = new EmprestimoViewModel();
                    emprestimo.codigo_Emprestimo = emprestimoRetorno.cod_Emprestimo.ToString();
                    emprestimo.Efetivo = emprestimoRetorno.efetivo;
                    emprestimo.Periodico = emprestimoRetorno.periodico;
                    emprestimo.data_Emprestimo = emprestimoRetorno.data_Emprestimo;
                    emprestimo.data_Devolucao = emprestimoRetorno.data_Devolucao;

                    emprestimos.Add(emprestimo);
                }

            }

        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
        }
    }
}
