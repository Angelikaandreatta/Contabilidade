@page "/CadastroPeriodico";
@page "/CadastroPeriodico/{CodPeriodico}"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@using System.Text
@using Negocio.Cadastro
@using Projeto_Contabilidade.Client.Componentes.Modal
@using Projeto_Contabilidade.Client.Componentes.Input
@using Projeto_Contabilidade.Client.Componentes.Steper
@using Newtonsoft.Json

<div class="card">
    <h4 class="card-header">Cadastro de Periódico</h4>
    <div class="card-body"></div>
    <EditForm Model="vmPeriodico">
        <Steper>
            <Step Text="Informações Cadastrais" Icon="oi-info" Value="Step1" Enabled="@IsEnabled">
                <div class="d-flex flex-column p-5">
                    <h3 class="form__title">
                        Informações Cadastrais
                    </h3>

                    <div class="form__inputs">
                        <div class="field__control">
                            <label>Nome</label>
                            <InputText class="field__input field__input--active" @bind-Value="vmPeriodico.Nome"></InputText>
                        </div>
                        <div class="field__control">
                            <label>Autor</label>
                            <InputText class="field__input field__input--active" @bind-Value="vmPeriodico.Autor"></InputText>
                        </div>
                        <div class="field__control">
                            <label>Editora</label>
                            <InputText class="field__input field__input--active" @bind-Value="vmPeriodico.Editora"></InputText>
                        </div>

                        <div class="field__control">
                            <label>Status</label>
                            <InputSelect class="field__input field__input--active" @bind-Value="vmPeriodico.Status.descStatusPeriodico">
                                <option value="disponivel">disponivel</option>
                                <option value="indisponivel">indisponivel</option>
                            </InputSelect>
                        </div>
                    </div>
                </div>
            </Step>
            @*       <Step Text="Confirmar informações" Icon="oi-location" Value="Step2" Enabled="@IsEnabled">
            <div class="d-flex flex-column p-5">
            <h4 class="form__title mb-4">
            Confirme as informações a seguir:
            </h4>
            <div class="d-flex flex-column">
            <span class="font-weight-bold">Nome da revista</span>
            <p>Lorem Ipsum is simply dummy text of the printing</p>
            </div>
            <div class="d-flex flex-column">
            <span class="font-weight-bold">Categoria</span>
            <p>Ficção científica</p>
            </div>
            <div class="d-flex flex-column">
            <span class="font-weight-bold">Descrição</span>
            <p>
            Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem
            Ipsum has been the industry's standard dummy text ever since the 1500s, when an
            unknown printer took a galley of type and scrambled it to make a type specimen book.
            </p>
            </div>

            </div>
            </Step>*@
        </Steper>
        <div class="form__buttons">
            <button class="btn btn-lg btn-outline-danger" @onclick="Excluir">
                Excluir
            </button>
            <button class="btn btn-lg btn-outline-info" @onclick="LimparTelaPeriodico">
                Limpar
            </button>

            <button class="btn btn-lg btn-outline-info" @onclick="CadastrarPeriodico">
                @if (string.IsNullOrWhiteSpace(vmPeriodico.Codigo_Periodico) == false)
                {
                    <div>Editar</div>
                }
                else
                {
                    <div>Gravar</div>
                }
            </button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public string CodPeriodico { get; set; }
    PeriodicoViewModel vmPeriodico = new PeriodicoViewModel();
    private Modal modal { get; set; }
    public bool IsEnabled = true;
    private bool loading;
    private string error;

    protected override async Task OnInitializedAsync()
    {

    }

    public async Task Gravar()
    {
        if (string.IsNullOrWhiteSpace(vmPeriodico.Codigo_Periodico) == true)
        {
            await CadastrarPeriodico();
        }
        else
        {
            await EditarPeriodico();
        }
    }

    private async Task EditarPeriodico()
    {
        Periodico periodicoEditar = new Periodico();
        periodicoEditar.codigo_Periodico = int.Parse(vmPeriodico.Codigo_Periodico);
        //empresa não edita
        periodicoEditar.Nome = vmPeriodico.Nome;
        periodicoEditar.Autor = vmPeriodico.Autor;
        periodicoEditar.Editora = vmPeriodico.Editora;
        periodicoEditar.Status = new StatusPeriodico();

        vmPeriodico.Status = new vmStatusPeriodico();

        if (vmPeriodico.Status != null)
        {
            if (periodicoEditar.Status.descStatusPeriodico == "disponivel" || periodicoEditar.Status.descStatusPeriodico == "indisponivel")
            {
                periodicoEditar.Status = new StatusPeriodico();
                periodicoEditar.Status.descStatusPeriodico = vmPeriodico.Status.descStatusPeriodico;
            }
        }

        try
        {
            string url = $"https://localhost:44388/Periodico/Atualizar";

            var response = await httpClient.PostAsJsonAsync(url, periodicoEditar);


            if (response.IsSuccessStatusCode == true)
            {
                Periodico periodicoRetorno = JsonConvert.DeserializeObject<Periodico>(await response.Content.ReadAsStringAsync());
                vmPeriodico.Codigo_Periodico = periodicoRetorno.codigo_Periodico.ToString();
                vmPeriodico.Nome = periodicoRetorno.Nome;
                vmPeriodico.Autor = periodicoRetorno.Autor;
                vmPeriodico.Editora = periodicoRetorno.Editora;

                vmPeriodico.Status = new vmStatusPeriodico();
                if (vmPeriodico.Status != null)
                {
                    if (vmPeriodico.Status.descStatusPeriodico == "disponivel" || vmPeriodico.Status.descStatusPeriodico == "indisponivel")
                    {
                        periodicoEditar.Status = new StatusPeriodico();
                        vmPeriodico.Status.descStatusPeriodico = periodicoRetorno.Status.descStatusPeriodico;
                    }
                }
                StateHasChanged();
                modal.Open("Periodico editado com sucesso");

            }
            else
            {
                modal.Open("Erro ao editar o Periodico");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }

    private async Task CadastrarPeriodico()
    {
        Periodico periodicoGravar = new Periodico();
        periodicoGravar.empresa = new Empresa();
        periodicoGravar.empresa.codigo_Empresa = 1;
        periodicoGravar.Nome = vmPeriodico.Nome;
        periodicoGravar.Autor = vmPeriodico.Autor;
        periodicoGravar.Editora = vmPeriodico.Editora;

       
        vmPeriodico.Status = new vmStatusPeriodico();
        if (vmPeriodico.Status.descStatusPeriodico == "disponivel" || vmPeriodico.Status.descStatusPeriodico == "indisponivel")
        {
            periodicoGravar.Status = new StatusPeriodico();
            periodicoGravar.Status.descStatusPeriodico = vmPeriodico.Status.descStatusPeriodico;
        }

        try
        {
            string url = $"https://localhost:44388/Periodico/Gravar";

            var response = await httpClient.PostAsJsonAsync(url, periodicoGravar);


            if (response.IsSuccessStatusCode == true)
            {
                Periodico periodicoRetorno = JsonConvert.DeserializeObject<Periodico>(await response.Content.ReadAsStringAsync());
                vmPeriodico.Codigo_Periodico = periodicoRetorno.codigo_Periodico.ToString();
                vmPeriodico.Nome = periodicoRetorno.Nome;
                vmPeriodico.Autor = periodicoRetorno.Autor;
                vmPeriodico.Editora = periodicoRetorno.Editora;

                vmPeriodico.Status = new vmStatusPeriodico();
                if (vmPeriodico.Status != null)
                {
                    if (periodicoRetorno.Status.descStatusPeriodico == "disponivel" || periodicoRetorno.Status.descStatusPeriodico == "indisponivel")
                    {
                        vmPeriodico.Status.descStatusPeriodico = periodicoRetorno.Status.descStatusPeriodico;
                    }
                }

                StateHasChanged();
                modal.Open("Periodico gravado com sucesso");

            }
            else
            {
                modal.Open("Erro ao gravar o Periodico");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }

    private async Task Excluir()
    {
        try
        {
            Cliente clienteExcluir = new Cliente();
            string url = $"https://localhost:44388/Periodico/Excluir?pCodPeriodico={vmPeriodico.Codigo_Periodico}";
            var response = await httpClient.DeleteAsync(url);

            if (response.IsSuccessStatusCode == true)
            {
                LimparTelaPeriodico();
                StateHasChanged();
                modal.Open("Periodico excluído com sucesso");
            }
            else
            {
                modal.Open("Erro ao excluir o Periodico.");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }

    public void LimparTelaPeriodico()
    {
        vmPeriodico.Codigo_Periodico = "";
        vmPeriodico.Nome = "";
        vmPeriodico.Autor = "";
        vmPeriodico.Editora = "";
        vmPeriodico.Status.descStatusPeriodico = "disponivel";
    }
}
