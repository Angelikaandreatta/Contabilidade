@page "/CadastroCliente/{codCliente?}/{codEndereco?}"
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager;
@using System.Text
@using Negocio.Cadastro
@using Projeto_Contabilidade.Client.Pages.cliente
@using Projeto_Contabilidade.Client.Componentes.Steper
@using Projeto_Contabilidade.Client.Componentes.Input
@using Projeto_Contabilidade.Client.Componentes.Modal
@using Projeto_Contabilidade.Client.Pages.endereco
@using Newtonsoft.Json

@if (loading)
{
    <h3>CARREGANDO ...</h3>
}
else
{
    <div class="card">
        <h4 class="card-header">@formTitle</h4>
        <div class="card-body">
            <EditForm Model="vmCliente">
                <Steper>
                    <Step Text="Informações Gerais" Icon="oi-info" Value="Step1" Enabled="@IsEnabled">
                        <div class="form__div">
                            <h3 class="form__title">
                                Informações Gerais
                            </h3>
                            <div class="form__inputs">
                                <div class="field__control">
                                    <label>Nome</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmCliente.Razao_Social"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>CNPJ</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmCliente.Cnpj"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>Quantidade de Empregado</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmCliente.Qtd_Empregado"></InputText>
                                </div>
                            </div>
                        </div>
                    </Step>
                    <Step Text="Informações de Endereço" Icon="oi-location" Value="Step2" Enabled="@IsEnabled">
                        <div class="form__div">
                            <h3 class="form__title">
                                Informações De Endereço
                            </h3>
                            <div class="form__inputs">
                                <div class="field__control">
                                    <label>Rua</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmCliente.Endereco.rua"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>Número</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmCliente.Endereco.numero"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>Bairro</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmCliente.Endereco.bairro"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>Cidade</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmCliente.Endereco.cidade"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>UF</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmCliente.Endereco.uf"></InputText>
                                </div>
                            </div>
                        </div>
                    </Step>
                </Steper>
                <div class="form__buttons">
                    <button @onclick="Excluir" class="btn btn-lg btn-outline-danger ">
                        Excluir
                    </button>
                    <button @onclick="LimparTelaCliente" class="btn btn-lg btn-outline-primary">
                        Limpar
                    </button>

                    <button @onclick="Gravar" class="btn btn-lg btn-outline-primary">
                        @if (string.IsNullOrWhiteSpace(vmCliente.Codigo_Cliente) == false)
                        {
                            <div>Editar</div>
                        }
                        else
                        {
                            <div>Gravar</div>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}
<Modal @ref="modal"></Modal>

@code {
    [Parameter] public string codCliente { get; set; }
    [Parameter] public string codEndereco { get; set; }
    ClienteViewModel vmCliente = new ClienteViewModel();
    EnderecoViewModel vmEndereco = new EnderecoViewModel();
    private Modal modal = new Modal();
    private string formTitle = "Cadastro de Cliente";
    public bool IsEnabled = true;
    public bool loading = false;
    private string error;

    protected override void OnInitialized()
    {
        if (codCliente != null)
        {
            formTitle = "Editar Cliente";
        }
    }

    protected override async void OnParametersSet()
    {
        if (codCliente != null)
        {
            await CarregarCliente();
        }
    }

    public async Task Gravar()
    {
        if (string.IsNullOrWhiteSpace(vmCliente.Codigo_Cliente) == true)
        {
            await CadastrarCliente();
        }
        else
        {
            await EditarCliente();
        }
    }

    private async Task EditarCliente()
    {
        loading = true;
        string cookieEmpresa = await JSRuntime.InvokeAsync<string>("blazorExtensions.GetCookieEmpresa");
        Cliente clienteEditar = new Cliente();
        clienteEditar.codigo_Cliente = int.Parse(vmCliente.Codigo_Cliente);
        clienteEditar.endereco = new Endereco();
        clienteEditar.endereco.codigo_Endereco = 1;
        clienteEditar.empresa = new Empresa();
        clienteEditar.empresa.codigo_Empresa = int.Parse(cookieEmpresa);
        clienteEditar.razao_Social = vmCliente.Razao_Social;
        clienteEditar.cnpj = vmCliente.Cnpj;
        clienteEditar.qtd_Empregado = vmCliente.Qtd_Empregado;


        try
        {
            string url = $"https://localhost:44388/Cliente/Atualizar";

            var response = await httpClient.PostAsJsonAsync(url, clienteEditar);


            if (response.IsSuccessStatusCode == true)
            {
                Cliente clienteRetorno = JsonConvert.DeserializeObject<Cliente>(await response.Content.ReadAsStringAsync());
                vmCliente.Codigo_Cliente = clienteRetorno.codigo_Cliente.ToString();
                vmCliente.Razao_Social = clienteRetorno.razao_Social;
                vmCliente.Cnpj = clienteRetorno.cnpj;
                vmCliente.Qtd_Empregado = clienteRetorno.qtd_Empregado;
                vmCliente.Endereco = new Endereco();
                vmCliente.Endereco.codigo_Endereco = clienteRetorno.endereco.codigo_Endereco;
                modal.Open("Cliente editado com sucesso", "Editar Cliente", "PesquisaCliente");
            }
            else
            {
                modal.Open("Erro ao editar o Cliente", "Editar Cliente", "CadastroCliente");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task<string> GetEmpresaLogada()
    {
        return await JSRuntime.InvokeAsync<string>("blazorExtensions.GetCookieEmpresa");
    }

    private async Task CadastrarCliente()
    {
        loading = true;
        Cliente clienteGravar = new Cliente();
        clienteGravar.razao_Social = vmCliente.Razao_Social;
        clienteGravar.empresa = new Empresa();
        clienteGravar.empresa.codigo_Empresa = int.Parse(await GetEmpresaLogada());
        clienteGravar.endereco = new Endereco();
        clienteGravar.endereco.codigo_Endereco = 1;
        clienteGravar.cnpj = vmCliente.Cnpj;
        clienteGravar.qtd_Empregado = vmCliente.Qtd_Empregado;

        try
        {
            string url = $"https://localhost:44388/Cliente/Gravar";
            var response = await httpClient.PostAsJsonAsync(url, clienteGravar);
            if (response.IsSuccessStatusCode == true)
            {
                Cliente clienteRetorno = JsonConvert.DeserializeObject<Cliente>(await response.Content.ReadAsStringAsync());
                vmCliente.Codigo_Cliente = clienteRetorno.codigo_Cliente.ToString();
                vmCliente.Razao_Social = clienteRetorno.razao_Social;
                vmCliente.Cnpj = clienteRetorno.cnpj;
                vmCliente.Qtd_Empregado = clienteRetorno.qtd_Empregado;
                modal.Open("Cliente gravado com sucesso", "Cadastrar Cliente", "PesquisaCliente");

            }
            else
            {
                modal.Open("Erro ao gravar o Cliente", "Cadastrar Cliente", "PesquisaCliente");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task Excluir()
    {
        try
        {
            loading = true;
            Cliente clienteExcluir = new Cliente();
            string url = $"https://localhost:44388/Cliente/Excluir?pCodCliente={vmCliente.Codigo_Cliente}";
            var response = await httpClient.DeleteAsync(url);

            if (response.IsSuccessStatusCode == true)
            {
                LimparTelaCliente();
                modal.Open("Cliente excluído com sucesso", "Excluir Cliente", "PesquisaCliente");

            }
            else
            {
                modal.Open("Erro ao excluir o cliente", "Excluir Cliente", "PesquisaCliente");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task CarregarCliente()
    {
        try
        {
            this.loading = true;
            string url = $"https://localhost:44388/Cliente/Carregar?pCodCliente={codCliente}";
            var response = await httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode == true)
            {
                Cliente clienteRetorno = JsonConvert.DeserializeObject<Cliente>(await response.Content.ReadAsStringAsync());

                vmCliente.Codigo_Cliente = clienteRetorno.codigo_Cliente.ToString();
                vmCliente.Razao_Social = clienteRetorno.razao_Social;
                vmCliente.Cnpj = clienteRetorno.cnpj;
                vmCliente.Qtd_Empregado = clienteRetorno.qtd_Empregado;
                vmCliente.Endereco = clienteRetorno.endereco;
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            this.loading = false;
            StateHasChanged();
        }
    }

    public async Task CadastrarEndereco()
    {
        string cookieEmpresa = await JSRuntime.InvokeAsync<string>("blazorExtensions.GetCookieEmpresa");
        Endereco enderecoGravar = new Endereco();
        enderecoGravar.rua = vmCliente.Endereco.rua;
        enderecoGravar.numero = vmCliente.Endereco.numero;
        enderecoGravar.bairro = vmCliente.Endereco.bairro;
        enderecoGravar.cidade = vmCliente.Endereco.cidade;
        enderecoGravar.uf = vmCliente.Endereco.uf;

        try
        {
            loading = true;
            string url = $"https://localhost:44388/Endereco/Gravar";
            var response = await httpClient.PostAsJsonAsync(url, enderecoGravar);
            if (response.IsSuccessStatusCode == true)
            {
                Endereco enderecoRetorno = JsonConvert.DeserializeObject<Endereco>(await response.Content.ReadAsStringAsync());
                vmCliente.Endereco.codigo_Endereco = enderecoRetorno.codigo_Endereco;
                vmCliente.Endereco.rua = enderecoRetorno.rua;
                vmCliente.Endereco.numero = enderecoRetorno.numero;
                vmCliente.Endereco.bairro = enderecoRetorno.bairro;
                vmCliente.Endereco.cidade = enderecoRetorno.cidade;
                vmCliente.Endereco.uf = enderecoRetorno.uf;

                modal.Open("Endereço cadastrado com sucesso", "Cadastrar endereço", "PesquisaFuncionario");
            }
            else
            {
                modal.Open("Erro ao cadastrar o endereço", "Cadastrar endereço", "PesquisaFuncionario");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    public async Task EditarEndereco()
    {

        Endereco enderecoEditar = new Endereco();
        enderecoEditar.rua = vmCliente.Endereco.rua;
        enderecoEditar.numero = vmCliente.Endereco.numero;
        enderecoEditar.bairro = vmCliente.Endereco.bairro;
        enderecoEditar.cidade = vmCliente.Endereco.cidade;
        enderecoEditar.uf = vmCliente.Endereco.uf;
        try
        {
            loading = true;
            string url = $"https://localhost:44388/Endereco/Atualizar";
            var response = await httpClient.PostAsJsonAsync(url, enderecoEditar);

            if (response.IsSuccessStatusCode)
            {
                Endereco enderecoRetorno = JsonConvert.DeserializeObject<Endereco>(await response.Content.ReadAsStringAsync());
                vmCliente.Endereco.codigo_Endereco = enderecoRetorno.codigo_Endereco;
                vmCliente.Endereco.rua = enderecoRetorno.rua;
                vmCliente.Endereco.numero = enderecoRetorno.numero;
                vmCliente.Endereco.bairro = enderecoRetorno.bairro;
                vmCliente.Endereco.cidade = enderecoRetorno.cidade;
                vmCliente.Endereco.uf = enderecoRetorno.uf;

                modal.Open("Endereço editado com sucesso", "Editar Endereço", "PesquisaFuncionario");
            }
            else
            {
                modal.Open("Erro ao editar o endereço", "Editar Endereço", "CadastroFuncionario");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    public async Task CarregarEndereco()
    {
        try
        {
            this.loading = true;
            string url = $"https://localhost:44388/Endereco/Carregar?pCodEndereco={codEndereco}";
            var response = await httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode == true)
            {
                Endereco enderecoRetorno = JsonConvert.DeserializeObject<Endereco>(await response.Content.ReadAsStringAsync());
                vmCliente.Endereco.codigo_Endereco = enderecoRetorno.codigo_Endereco;
                vmCliente.Endereco.rua = enderecoRetorno.rua;
                vmCliente.Endereco.numero = enderecoRetorno.numero;
                vmCliente.Endereco.bairro = enderecoRetorno.bairro;
                vmCliente.Endereco.cidade = enderecoRetorno.cidade;
                vmCliente.Endereco.uf = enderecoRetorno.uf;
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            this.loading = false;
            StateHasChanged();
        }
    }

    public void LimparTelaCliente()
    {
        vmCliente.Codigo_Cliente = "";
        vmCliente.Razao_Social = "";
        vmCliente.Cnpj = "";
        vmCliente.Qtd_Empregado = "";
    }
}
