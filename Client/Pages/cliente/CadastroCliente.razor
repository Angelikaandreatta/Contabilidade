@page "/CadastroCliente"
@page "/CadastroCliente/{codCliente}"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@using System.Text
@using Negocio.Cadastro
@using Projeto_Contabilidade.Client.Pages.cliente
@using Projeto_Contabilidade.Client.Componentes.Steper
@using Projeto_Contabilidade.Client.Componentes.Input

<div class="card">
    <h4 class="card-header">Cadastro de Cliente</h4>
    <div class="card-body">
        <EditForm Model="vmCliente">
            <Steper>
                <Step Text="Informações Gerais" Icon="oi-info" Value="Step1" Enabled="@IsEnabled">
                    <div class="form__div">
                        <h3 class="form__title">
                            Informações Gerais
                        </h3>
                        <div class="form__inputs">
                            <div class="field__control">
                                <label>Nome</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmCliente.Nome_Cliente"></InputText>
                            </div>
                            <div class="field__control">
                                <label>CNPJ</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmCliente.Cnpj"></InputText>
                            </div>
                            <div class="field__control">
                                <label>E-Mail</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmCliente.Email"></InputText>
                            </div>
                            <div class="field__control">
                                <label>IE</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmCliente.Ie"></InputText>
                            </div>
                        </div>
                    </div>
                </Step>
                <Step Text="Informações de Endereço" Icon="oi-location" Value="Step2" Enabled="@IsEnabled">
                    <div class="form__div">
                        <h3 class="form__title">
                            Informações De Endereço
                        </h3>
                        <div class="form__inputs">
                            <div class="field__control">
                                <label>Rua</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmCliente.Rua"></InputText>
                            </div>
                            <div class="field__control">
                                <label>Número</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmCliente.Numero"></InputText>
                            </div>
                            <div class="field__control">
                                <label>Bairro</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmCliente.Bairro"></InputText>
                            </div>
                            <div class="field__control">
                                <label>CEP</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmCliente.Cep"></InputText>
                            </div>
                            <div class="field__control">
                                <label>Cidade</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmCliente.Nome_Cidade"></InputText>
                            </div>
                            <div class="field__control">
                                <label>UF</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmCliente.Uf"></InputText>
                            </div>
                        </div>
                    </div>
                </Step>
            </Steper>
            <div class="form__buttons">
                <button @onclick="Excluir" class="button button--normal button--delete">
                    Excluir
                </button>
                <button @onclick="LimparTelaCliente" class="button button--normal button--action">
                    Limpar
                </button>
                @if (string.IsNullOrWhiteSpace(vmCliente.Cod_Cliente) == true)
                {
                    <button @onclick="CadastrarCliente" class="button button--normal button--action">
                        Gravar
                    </button>
                }
                else
                {
                    <button @onclick="EditarCliente" class="button button--normal button--action">
                        Editar
                    </button>
                }
            </div>
        </EditForm>
    </div>
</div>

@code {

    public bool IsEnabled = true;

    [Parameter] public string codCliente { get; set; }
    ClienteViewModel vmCliente = new ClienteViewModel();
    //Não é necessário instânciar  a vmCidade pois a cidade está dentro da vmCliente, instânciada.
    // VmCidade vmCidade = new VmCidade();
    private bool loading;
    private string error;
    private bool editando = false;
    private Cliente editarCliente = null;

    protected override async Task OnInitializedAsync()
    {
        // await CadastrarCliente();
    }

    public Cliente Editar
    {
        get
        {
            return editarCliente;
        }
        set
        {
            vmCliente.Nome_Cliente = editarCliente.nome_Cliente;
            vmCliente.Cnpj = editarCliente.cnpj;
            vmCliente.Email = editarCliente.email;
            vmCliente.Ie = editarCliente.ie;
            vmCliente.Cep = editarCliente.cep;
            vmCliente.Uf = editarCliente.uf;
            vmCliente.Bairro = editarCliente.bairro;
            vmCliente.Rua = editarCliente.rua;
            vmCliente.Numero = editarCliente.numero;
            vmCliente.Nome_Cidade = editarCliente.nome_Cidade;
        }
    }

    private async Task EditarCliente()
    {
        Cliente clienteEditar = new Cliente();
        clienteEditar.nome_Cliente = vmCliente.Nome_Cliente;
        clienteEditar.cnpj = vmCliente.Cnpj;
        clienteEditar.email = vmCliente.Email;
        clienteEditar.ie = vmCliente.Ie;
        clienteEditar.cep = vmCliente.Cep;
        clienteEditar.uf = vmCliente.Uf;
        clienteEditar.bairro = vmCliente.Bairro;
        clienteEditar.rua = vmCliente.Rua;
        clienteEditar.numero = vmCliente.Numero;
        clienteEditar.cod_Cidade = 1;
        clienteEditar.nome_Cidade = vmCliente.Nome_Cidade;
        clienteEditar.cod_Contato = 1;

        try
        {
            string url = $"https://localhost:44388/Cliente/Editar";

            var response = await httpClient.PostAsJsonAsync(url, clienteEditar);

            if (response.IsSuccessStatusCode == true)
            {
                vmCliente.Cod_Cliente = clienteEditar.cod_Cliente.ToString();
                vmCliente.Nome_Cliente = clienteEditar.nome_Cliente;
                vmCliente.Cnpj = clienteEditar.cnpj;
                vmCliente.Email = clienteEditar.email;
                vmCliente.Ie = clienteEditar.ie;
                vmCliente.Cep = clienteEditar.cep;
                vmCliente.Uf = clienteEditar.uf;
                vmCliente.Bairro = clienteEditar.bairro;
                vmCliente.Rua = clienteEditar.rua;
                vmCliente.Numero = clienteEditar.numero;
                vmCliente.Cod_Cidade = clienteEditar.cod_Cidade.ToString();
                vmCliente.Nome_Cidade = clienteEditar.nome_Cidade;
                vmCliente.Cod_Contato = clienteEditar.cod_Contato.ToString();

                //Verificar no blazor como usar o retorno de mensagem sem usando requestMessage
                throw new HttpRequestException($"Cliente editado com sucesso");
                //Console.WriteLine("Cliente gravado com sucesso");
            }
            else
            {
                throw new InvalidOperationException("Erro ao editar o Cliente.");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }

    private async Task CadastrarCliente()
    {
        Cliente clienteGravar = new Cliente();
        clienteGravar.nome_Cliente = vmCliente.Nome_Cliente;
        clienteGravar.cnpj = vmCliente.Cnpj;
        clienteGravar.email = vmCliente.Email;
        clienteGravar.ie = vmCliente.Ie;
        clienteGravar.cep = vmCliente.Cep;
        clienteGravar.uf = vmCliente.Uf;
        clienteGravar.bairro = vmCliente.Bairro;
        clienteGravar.rua = vmCliente.Rua;
        clienteGravar.numero = vmCliente.Numero;
        clienteGravar.cod_Cidade = 1;
        clienteGravar.nome_Cidade = vmCliente.Nome_Cidade;
        clienteGravar.cod_Contato = 1;

        try
        {
            string url = $"https://localhost:44388/Cliente/Gravar";

            var response = await httpClient.PostAsJsonAsync(url, clienteGravar);

            if (response.IsSuccessStatusCode == true)
            {
                vmCliente.Cod_Cliente = clienteGravar.cod_Cliente.ToString();
                vmCliente.Nome_Cliente = clienteGravar.nome_Cliente;
                vmCliente.Cnpj = clienteGravar.cnpj;
                vmCliente.Email = clienteGravar.email;
                vmCliente.Ie = clienteGravar.ie;
                vmCliente.Cep = clienteGravar.cep;
                vmCliente.Uf = clienteGravar.uf;
                vmCliente.Bairro = clienteGravar.bairro;
                vmCliente.Rua = clienteGravar.rua;
                vmCliente.Numero = clienteGravar.numero;
                vmCliente.Cod_Cidade = clienteGravar.cod_Cidade.ToString();
                vmCliente.Nome_Cidade = clienteGravar.nome_Cidade;
                vmCliente.Cod_Contato = clienteGravar.cod_Contato.ToString();

                //Verificar no blazor como usar o retorno de mensagem sem usando requestMessage
                throw new HttpRequestException($"Cliente gravado com sucesso");
                //Console.WriteLine("Cliente gravado com sucesso");
            }
            else
            {
                throw new InvalidOperationException("Erro ao gravar o Cliente.");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }

    private async Task Excluir()
    {
        try
        {
            Cliente clienteExcluir = new Cliente();
            string url = $"https://localhost:44388/Cliente/Excluir";
            var response = await httpClient.PostAsJsonAsync(url, clienteExcluir);

            if (response.IsSuccessStatusCode)
            {
                throw new HttpRequestException($"Cliente excluído com sucesso");
                LimparTelaCliente();
                StateHasChanged();
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }

    public void LimparTelaCliente()
    {
        vmCliente.Nome_Cliente = "";
        vmCliente.Cnpj = "";
        vmCliente.Ie = "";
        vmCliente.Email = "";
        vmCliente.Rua = "";
        vmCliente.Numero = "";
        vmCliente.Bairro = "";
        vmCliente.Cep = "";
        vmCliente.Uf = "";
        vmCliente.Nome_Cidade = "";
    }

}
