@page "/CadastroCliente"
@page "/CadastroCliente/{codCliente}"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@using System.Text
@using Negocio.Cadastro
@using Projeto_Contabilidade.Client.Pages.cliente
@using Projeto_Contabilidade.Client.Componentes.Steper
@using Projeto_Contabilidade.Client.Componentes.Input
@using Projeto_Contabilidade.Client.Componentes.Modal
@using Projeto_Contabilidade.Client.Pages.endereco

<div class="card">
    <h4 class="card-header">Cadastro de Cliente</h4>
    <div class="card-body">
        <EditForm Model="vmCliente">
            <Steper>
                <Step Text="Informações Gerais" Icon="oi-info" Value="Step1" Enabled="@IsEnabled">
                    <div class="form__div">
                        <h3 class="form__title">
                            Informações Gerais
                        </h3>
                        <div class="form__inputs">
                            <div class="field__control">
                                <label>Nome</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmCliente.Razao_Social"></InputText>
                            </div>
                            <div class="field__control">
                                <label>CNPJ</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmCliente.Cnpj"></InputText>
                            </div>
                            <div class="field__control">
                                <label>Quantidade de Empregado</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmCliente.Qtd_Empregado"></InputText>
                            </div>
                        </div>
                    </div>
                </Step>
                <Step Text="Informações de Endereço" Icon="oi-location" Value="Step2" Enabled="@IsEnabled">
                    <div class="form__div">
                        <h3 class="form__title">
                            Informações De Endereço
                        </h3>
                        <div class="form__inputs">
                            <div class="field__control">
                                <label>Rua</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmEndereco.Rua"></InputText>
                            </div>
                            <div class="field__control">
                                <label>Número</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmEndereco.Numero"></InputText>
                            </div>
                            <div class="field__control">
                                <label>Bairro</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmEndereco.Bairro"></InputText>
                            </div>
                            <div class="field__control">
                                <label>Cidade</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmEndereco.Cidade"></InputText>
                            </div>
                            <div class="field__control">
                                <label>UF</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmEndereco.Uf"></InputText>
                            </div>
                        </div>
                    </div>
                </Step>
            </Steper>
            <div class="form__buttons">
                <button @onclick="Excluir" class="btn btn-lg btn-outline-danger ">
                    Excluir
                </button>
                <button @onclick="LimparTelaCliente" class="btn btn-lg btn-outline-info">
                    Limpar
                </button>

                <button @onclick="Gravar" class="btn btn-lg btn-outline-info">
                    @if (string.IsNullOrWhiteSpace(vmCliente.Codigo_Cliente) == false)
                    {
                        <div>Editar</div>
                    }
                    else
                    {
                        <div>Gravar</div>
                    }
                </button>
            </div>
        </EditForm>
    </div>

    <Modal @ref="modal"></Modal>

</div>

@code {
    [Parameter] public string codCliente { get; set; }
    ClienteViewModel vmCliente = new ClienteViewModel();
    EnderecoViewModel vmEndereco = new EnderecoViewModel();
    private Modal modal { get; set; }
    public bool IsEnabled = true;
    private bool loading;
    private string error;
    protected override async Task OnInitializedAsync()
    {

    }

    public async Task Gravar()
    {
        if (string.IsNullOrWhiteSpace(vmCliente.Codigo_Cliente) == true)
        {
            await CadastrarCliente();
        }
        else
        {
            await EditarCliente();
        }
    }

    private async Task EditarCliente()
    {
        Cliente clienteEditar = new Cliente();
        clienteEditar.codigo_Cliente = int.Parse(vmCliente.Codigo_Cliente);
        //empresa não edita
        Endereco endereco = new Endereco();
        clienteEditar.endereco.codigo_Endereco = 1;
        clienteEditar.cnpj = vmCliente.Cnpj;
        clienteEditar.qtd_Empregado = vmCliente.Qtd_Empregado;


        try
        {
            string url = $"https://localhost:44388/Cliente/Atualizar";

            var response = await httpClient.PostAsJsonAsync(url, clienteEditar);


            if (response.IsSuccessStatusCode == true)
            {
                vmCliente.Codigo_Cliente = clienteEditar.codigo_Cliente.ToString();
                vmCliente.Razao_Social = clienteEditar.razao_Social;
                vmCliente.Cnpj = clienteEditar.cnpj;
                vmCliente.Qtd_Empregado = clienteEditar.qtd_Empregado;
                //carregar empresa
                vmCliente.Endereco.codigo_Endereco = clienteEditar.endereco.codigo_Endereco;

                StateHasChanged();
                modal.Open("Cliente editado com sucesso");

            }
            else
            {
                modal.Open("Erro ao editar o Cliente");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }

    private async Task CadastrarCliente()
    {
        Cliente clienteGravar = new Cliente();
        clienteGravar.razao_Social = vmCliente.Razao_Social;
        Empresa empresa = new Empresa();
        clienteGravar.empresa.codigo_Empresa = 1;
        Endereco endereco = new Endereco();
        clienteGravar.endereco.codigo_Endereco = 1;
        clienteGravar.cnpj = vmCliente.Cnpj;
        clienteGravar.qtd_Empregado = vmCliente.Qtd_Empregado;

        try
        {
            string url = $"https://localhost:44388/Cliente/Gravar";

            var response = await httpClient.PostAsJsonAsync(url, clienteGravar);


            if (response.IsSuccessStatusCode == true)
            {
                vmCliente.Codigo_Cliente = clienteGravar.codigo_Cliente.ToString();
                vmCliente.Razao_Social = clienteGravar.razao_Social;
                vmCliente.Cnpj = clienteGravar.cnpj;
                vmCliente.Qtd_Empregado = clienteGravar.qtd_Empregado;

                StateHasChanged();
                modal.Open("Cliente gravado com sucesso");

            }
            else
            {
                modal.Open("Erro ao gravar o Cliente");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }

    private async Task Excluir()
    {
        try
        {
            Cliente clienteExcluir = new Cliente();
            string url = $"https://localhost:44388/Cliente/Excluir";
            var response = await httpClient.PostAsJsonAsync(url, clienteExcluir);

            if (response.IsSuccessStatusCode == true)
            {
                LimparTelaCliente();
                StateHasChanged();
                modal.Open("Cliente excluído com sucesso");
            }
            else
            {
                modal.Open("Erro ao excluir o cliente.");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }

    public void LimparTelaCliente()
    {
        vmCliente.Codigo_Cliente = "";
        vmCliente.Razao_Social = "";
        vmCliente.Cnpj = "";
        vmCliente.Razao_Social = "";
    }
}
