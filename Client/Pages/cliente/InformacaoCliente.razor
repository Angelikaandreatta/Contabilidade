@page "/InformacaoCliente/{codCliente}"
@using Projeto_Contabilidade.Client.Componentes.Tabela
@using Projeto_Contabilidade.Client.Componentes.Input
@using Projeto_Contabilidade.Client.Componentes.Modal
@using Projeto_Contabilidade.Client.Pages.Contato
@using Negocio.Cadastro
@using Newtonsoft.Json
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

@if (loading)
{
    <h3>CARREGANDO ...</h3>
}
else
{
    <div class="info">
        <h3>@vmCliente.Razao_Social</h3>
        <div class="info__controls">
            <Input readOnly="true" value="@vmCliente.Cnpj" label="CNPJ" id="info_cnpj"></Input>
            <Input readOnly="true" value="@vmCliente.Qtd_Empregado" label="Total de Empregados" id="info_totalEmpregados"></Input>
        </div>
        <div class="d-flex w-100 justify-content-between">
            <h3 class="">Contatos Cadastrados</h3>
            <div style="width:250px" class="d-flex form-control">
                <span class="oi oi-magnifying-glass"></span>
                <input style="outline:0" type="text" placeholder="Pesquisa" class="w-100 h-100 border-0" />
            </div>
        </div>
        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">Nome</th>
                    <th scope="col">Email</th>
                    <th scope="col">Ações</th>
                </tr>
            </thead>
            <tbody>
                @foreach (ContatoViewModel contato in contatos)
                {
                    @if (contato.Cliente.Codigo_Cliente.ToString() == codCliente)
                    {
                        <tr>
                            <td>@contato.Nome_Contato</td>
                            <td>@contato.Email</td>
                            <td class="table__data">
                                <button @onclick=@(() => NavigationManager.NavigateTo($"CadastroContato/{contato.Cod_Contato}")) class="btn btn-outline-success">Editar</button>
                                <button @onclick=@(() => ExcluirContato(contato.Cod_Contato)) class="btn btn-outline-danger">Deletar</button>
                            </td>
                        </tr>
                    }
                }
                <tr>
                    <td colspan=3 class="text-center">
                        <button @onclick=@(() => NavigationManager.NavigateTo("CadastroContato")) class="btn btn-outline-primary">
                            Novo Contato
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="info__buttons">
            <button @onclick=@(() => NavigationManager.NavigateTo($"CadastroCliente/{vmCliente.Codigo_Cliente}")) class="btn btn-lg btn-outline-success">Editar</button>
            <button  class="btn btn-lg btn-outline-danger">Deletar</button>
        </div>
    </div>
}
<Modal @ref=modal></Modal>

@code {

    [Parameter] public string codCliente { get; set; }
    ClienteViewModel vmCliente = new ClienteViewModel();
    List<ContatoViewModel> contatos = new List<ContatoViewModel>();
    private Modal modal = new Modal();
    public Contato contTemp = new Contato();
    public bool loading = false;

    protected override void OnInitialized()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await CarregarCliente();

    }

    public async Task CarregarCliente()
    {
        try
        {
            loading = true;
            string url = $"https://localhost:44388/Cliente/Carregar?pCodCliente={codCliente}";
            var response = await httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode == true)
            {
                Cliente clienteRetorno = JsonConvert.DeserializeObject<Cliente>(await response.Content.ReadAsStringAsync());

                vmCliente.Codigo_Cliente = clienteRetorno.codigo_Cliente.ToString();
                vmCliente.Razao_Social = clienteRetorno.razao_Social;
                vmCliente.Cnpj = clienteRetorno.cnpj;
                vmCliente.Qtd_Empregado = clienteRetorno.qtd_Empregado;
                vmCliente.Endereco = clienteRetorno.endereco;
                await ListarContato();
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task ExcluirContato(string codContato)
    {
        try
        {
            Contato contatoExcluir = new Contato();
            string url = $"https://localhost:44388/Contato/Excluir?pCodContato={codContato}";
            var response = await httpClient.DeleteAsync(url);

            if (response.IsSuccessStatusCode == true)
            {
                modal.Open("Contato excluído com sucesso", "Excluir Contato", "PesquisaContato");

            }
            else
            {
                modal.Open("Erro ao excluir o contato", "Excluir Contato", "PesquisaContato");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            StateHasChanged();
        }
    }

    protected async Task ListarContato()
    {
        try
        {
            loading = true;
            string url = $"https://localhost:44388/Contato/Listar";
            var response = await httpClient.PostAsJsonAsync(url, contTemp);
            if (response.IsSuccessStatusCode == true)
            {
                List<Contato> contatosRetorno = JsonConvert.DeserializeObject<List<Contato>>(await response.Content.ReadAsStringAsync());

                contatos.RemoveRange(0, contatos.Count);
                foreach (Contato contatoRetorno in contatosRetorno)
                {
                    ContatoViewModel contato = new ContatoViewModel();
                    contato.Cod_Contato = contatoRetorno.cod_Contato.ToString();
                    contato.Cliente = new vmCliente();
                    contato.Cliente.Codigo_Cliente = contatoRetorno.cliente.codigo_Cliente;
                    contato.Nome_Contato = contatoRetorno.nome;
                    contato.Email = contatoRetorno.email;
                    contato.Telefone = contatoRetorno.telefone;
                    contato.Setor = contatoRetorno.setor;

                    contatos.Add(contato);
                }
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
        }
    }


}
