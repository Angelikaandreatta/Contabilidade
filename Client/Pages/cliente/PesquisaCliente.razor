@page "/PesquisaCliente"
@using Negocio.Cadastro
@using Projeto_Contabilidade.Client.Componentes.Modal
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Newtonsoft.Json

@if (loading)
{
    <h3 class="text-center">CARREGANDO ...</h3>
}
else
{
    <div class="d-flex w-100 justify-content-between">
        <h2 class="">Clientes Cadastrados</h2>
        <div style="width:250px" class="d-flex form-control">
            <span class="oi oi-magnifying-glass"></span>
            <input style="outline:0" type="text" placeholder="Pesquisa" class="w-100 h-100 border-0" />
        </div>
    </div>

    <table class="table table-hover">
        <tr>
            <th class="text-center">Info</th>
            <th>Razão Social</th>
            <th>CNPJ</th>
            <th>Qtd Empregado</th>
            <th class="text-center">
                Ações
            </th>
        </tr>
        <tbody>
            @foreach (ClienteViewModel cliente in clientes)
            {
                @if (cliente.Empresa.codigo_Empresa == codigoEmpresa)
                {
                    <tr>
                        <td class="text-center">
                            <button @onclick=@(() => NavigationManager.NavigateTo($"InformacaoCliente/{cliente.Codigo_Cliente}")) class="btn btn- btn-primary">
                                <span class="oi oi-info"></span>
                            </button>

                        </td>
                        <td>@cliente.Razao_Social</td>
                        <td>@cliente.Cnpj</td>
                        <td>@cliente.Qtd_Empregado</td>
                        <td>
                            <div class="text-center">
                                <button @onclick=@(() => NavigationManager.NavigateTo($"CadastroCliente/{cliente.Codigo_Cliente}")) type="button" class="btn btn-outline-success">
                                    Editar
                                </button>
                                <button @onclick="@(() => ExcluirCliente(cliente.Codigo_Cliente))" type="button" class="btn btn-outline-danger">Deletar</button>
                            </div>
                        </td>
                    </tr>
                }
            }
            <tr>
                <td colspan=5 class="text-center">
                    <button class="btn btn-outline-primary"
                        @onclick=@(() => NavigationManager.NavigateTo("CadastroCliente"))>
                        Adicionar Cliente
                    </button>
                </td>
            </tr>
        </tbody>
    </table>
}

<Modal @ref="modal"></Modal>

@code {
    public Cliente clientTemp = new Cliente();
    public bool loading = false;
    public int codigoEmpresa { get; set; }
    List<ClienteViewModel> clientes = new List<ClienteViewModel>();
    Modal modal = new Modal();


    async protected override Task OnInitializedAsync()
    {
        await ListarCliente();
        StateHasChanged();
    }

    private async Task GetCookieCodigoEmpresa()
    {
        try
        {
            string cookieEmpresa = await JSRuntime.InvokeAsync<string>("blazorExtensions.GetCookieEmpresa");
            codigoEmpresa = int.Parse(cookieEmpresa);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw new Exception(ex.Message);
        }
    }

    protected async Task ListarCliente()
    {
        try
        {
            loading = true;
            string url = $"https://localhost:44388/Cliente/Listar";
            var response = await httpClient.PostAsJsonAsync(url, clientTemp);
            await GetCookieCodigoEmpresa();
            if (response.IsSuccessStatusCode == true)
            {
                List<Cliente> clientesRetorno = JsonConvert.DeserializeObject<List<Cliente>>(await response.Content.ReadAsStringAsync());

                clientes.RemoveRange(0, clientes.Count);
                foreach (Cliente clienteRetorno in clientesRetorno)
                {
                    ClienteViewModel cliente = new ClienteViewModel();
                    cliente.Codigo_Cliente = clienteRetorno.codigo_Cliente.ToString();
                    cliente.Razao_Social = clienteRetorno.razao_Social;
                    cliente.Cnpj = clienteRetorno.cnpj;
                    cliente.Qtd_Empregado = clienteRetorno.qtd_Empregado;
                    cliente.Endereco = new Endereco();
                    cliente.Endereco.codigo_Endereco = clienteRetorno.endereco.codigo_Endereco;
                    cliente.Empresa = clienteRetorno.empresa;

                    clientes.Add(cliente);
                }

            }

        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
        }
    }

    protected async Task ExcluirCliente(string codCliente)
    {
        try
        {
            Cliente clienteExcluir = new Cliente();
            string url = $"https://localhost:44388/Cliente/Excluir?pCodCliente={codCliente}";
            var response = await httpClient.DeleteAsync(url);

            if (response.IsSuccessStatusCode == true)
            {
                await ListarCliente();
                modal.Open("Cliente excluído com sucesso", "Excluir Cliente", "PesquisaCliente");

            }
            else
            {
                modal.Open("Erro ao excluir o cliente", "Excluir Cliente", "PesquisaCliente");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }
}
