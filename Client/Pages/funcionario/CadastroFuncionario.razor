@page "/CadastroFuncionario/{codFuncionario?}/{codEndereco?}/{pTipoFuncionario?}"
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@using System.Text
@using Negocio.Cadastro
@using Projeto_Contabilidade.Client.Pages.endereco
@using Projeto_Contabilidade.Client.Pages.funcionario
@using Projeto_Contabilidade.Client.Componentes.Steper
@using Projeto_Contabilidade.Client.Componentes.Input
@using Projeto_Contabilidade.Client.Componentes.Modal
@using Newtonsoft.Json

@if (loading)
{
    <h3>CARREGANDO ...</h3>
}
else
{
    <div class="card">
        <h4 class="card-header">@formTitle</h4>
        <div class="card-body">
            <EditForm Model="vmEfetivo">
                <Steper>
                    <Step Text="Informações Gerais" Icon="oi-info" Value="Step1" Enabled="@IsEnabled">
                        <div class="form__div">
                            <h3 class="form__title">
                                Informações Gerais
                            </h3>
                            <div class="form__inputs">
                                <div class="field__control">
                                    <label>Nome</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmFuncionario.Nome"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>CPF</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmFuncionario.Cpf"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>E-Mail</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmFuncionario.Email"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>Data Nascimento</label>
                                    <InputDate class="field__input field__input--active" @bind-Value="vmFuncionario.Data_Nascimento"></InputDate>
                                </div>
                                <div class="field__control">
                                    <label>Tipo de funcionário</label>
                                    <InputSelect class="field__input field__input--active" @bind-Value="tipoFuncionario">
                                        <option default>Selecione</option>
                                        <option value="efetivo">Efetivo</option>
                                        <option value="estagiario">Estágiario</option>
                                    </InputSelect>
                                </div>
                                @if (tipoFuncionario == "estagiario")
                                {
                                    <div class="field__control">
                                        <label>Nome do curso</label>
                                        <InputText class="field__input field__input--active" @bind-Value="vmEstagiario.Nome_Curso"></InputText>
                                    </div>
                                    <div class="field__control">
                                        <label>Data do inicio do curso</label>
                                        <InputDate class="field__input field__input--active" @bind-Value="vmEstagiario.Data_Inicio_Curso"></InputDate>
                                    </div>
                                }
                                else if (tipoFuncionario == "efetivo")
                                {
                                    <div class="field__control">
                                        <label>Cargo do funcionário</label>
                                        <InputSelect class="field__input field__input--active" @bind-Value="vmEfetivo.Cargo.nome">
                                            <option value="suporte">Suporte</option>
                                            <option value="gestor">Gestor</option>
                                            <option value="analista">Analista</option>
                                            <option value="diretor">Diretor</option>
                                        </InputSelect>
                                    </div>
                                }
                            </div>
                        </div>
                    </Step>
                    <Step Text="Informações de Endereço" Icon="oi-location" Value="Step2" Enabled="@IsEnabled">
                        <div class="form__div">
                            <h3 class="form__title">
                                Informações De Endereço
                            </h3>
                            <div class="form__inputs">
                                <div class="field__control">
                                    <label>Rua</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmEfetivo.Endereco.rua"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>Número</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmEfetivo.Endereco.numero"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>Bairro</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmEfetivo.Endereco.bairro"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>Cidade</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmEfetivo.Endereco.cidade"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>UF</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmEfetivo.Endereco.uf"></InputText>
                                </div>
                            </div>
                        </div>
                    </Step>
                </Steper>
                <div class="form__buttons">
                    <button @onclick="ExcluirEfetivo" class="btn btn-lg btn-outline-danger">
                        Excluir
                    </button>
                    <button class="btn btn-lg btn-outline-primary">
                        Limpar
                    </button>

                    <button @onclick="Gravar" class="btn btn-lg btn-outline-primary">
                        @if (!string.IsNullOrWhiteSpace(vmEfetivo.Codigo_Efetivo) || !string.IsNullOrWhiteSpace(vmEstagiario.Codigo_Estagiario))
                        {
                            <div>Editar</div>
                        }
                        else
                        {
                            <div>Gravar</div>
                        }
                    </button>

                </div>
            </EditForm>
        </div>
    </div>
}
<Modal @ref="modal"></Modal>
@code {

    public enum EnumTipoFuncionario
    {
        efetivo,
        estagiario
    }

    [Parameter] public string codFuncionario { get; set; }
    [Parameter] public string codEndereco { get; set; }
    [Parameter] public string pTipoFuncionario { get; set; }
    FuncionarioViewModel vmFuncionario = new FuncionarioViewModel();
    EstagiarioViewModel vmEstagiario = new EstagiarioViewModel();
    EnderecoViewModel vmEndereco = new EnderecoViewModel();
    EfetivoViewModel vmEfetivo = new EfetivoViewModel();

    private Modal modal { get; set; }
    public bool IsEnabled = true;
    private string tipoFuncionario { get; set; }
    private string formTitle = "Cadastro Funcionário";
    private bool loading = false;

    protected override void OnInitialized()
    {
        if (codFuncionario != null)
        {
            formTitle = "Editar Funcionário";
        }
    }

    protected override async void OnParametersSet()
    {
        if (codFuncionario != null && pTipoFuncionario == "0")
        {
            await CarregarEfetivo();

        }

        else if (codFuncionario != null && pTipoFuncionario == "1")
        {
            await CarregarEstagiario();

        }

    }

    public async Task CarregarCargos()
    {
        //try
        //{
        //    public string url = $"https://localhost:44388/Cargo/Carregar";
        //}
        //catch(InvalidOperationException ex)
        //{

        //}
    }

    public async Task Gravar()
    {
        if (tipoFuncionario == "efetivo")
        {
            if (string.IsNullOrWhiteSpace(vmEfetivo.Codigo_Efetivo)) await CadastrarEfetivo();
            else await EditarEfetivo();
        }
        else if (tipoFuncionario == "estagiario")
        {
            if (string.IsNullOrWhiteSpace(vmEstagiario.Codigo_Estagiario)) await CadastrarEstagiario();
            else await EditarEstagiario();
        }
    }

    public async Task CadastrarEfetivo()
    {
        string cookieEmpresa = await JSRuntime.InvokeAsync<string>("blazorExtensions.GetCookieEmpresa");
        Efetivo efetivoGravar = new Efetivo();
        efetivoGravar.nome = vmFuncionario.Nome;
        efetivoGravar.cpf = vmFuncionario.Cpf;
        efetivoGravar.email = vmFuncionario.Email;
        efetivoGravar.data_Nascimento = vmFuncionario.Data_Nascimento;
        efetivoGravar.empresa = new Empresa();
        efetivoGravar.empresa.codigo_Empresa = int.Parse(cookieEmpresa);
        efetivoGravar.endereco = new Endereco();
        efetivoGravar.endereco.codigo_Endereco = 1;
        efetivoGravar.cargo = new Cargo();
        efetivoGravar.cargo.codigo_Cargo = 1;
        try
        {
            loading = true;
            string url = $"https://localhost:44388/Efetivo/Gravar";
            var response = await httpClient.PostAsJsonAsync(url, efetivoGravar);
            if (response.IsSuccessStatusCode == true)
            {
                Efetivo efetivoRetorno = JsonConvert.DeserializeObject<Efetivo>(await response.Content.ReadAsStringAsync());
                modal.Open("Funcionario cadastrado com sucesso", "Cadastrar funcionário", "PesquisaFuncionario");
            }
            else
            {
                modal.Open("Erro ao cadastrar o funcionario", "Cadastrar funcionário", "PesquisaFuncionario");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    public async Task CadastrarEstagiario()
    {
        string cookieEmpresa = await JSRuntime.InvokeAsync<string>("blazorExtensions.GetCookieEmpresa");
        Estagiario estagiarioGravar = new Estagiario();
        estagiarioGravar.nome = vmFuncionario.Nome;
        estagiarioGravar.cpf = vmFuncionario.Cpf;
        estagiarioGravar.email = vmFuncionario.Email;
        estagiarioGravar.data_Nascimento = vmFuncionario.Data_Nascimento;
        estagiarioGravar.nome_curso = vmEstagiario.Nome_Curso;
        estagiarioGravar.data_Inicio_Curso = vmEstagiario.Data_Inicio_Curso;
        estagiarioGravar.empresa = new Empresa();
        estagiarioGravar.empresa.codigo_Empresa = int.Parse(cookieEmpresa);
        estagiarioGravar.endereco = new Endereco();
        estagiarioGravar.endereco.codigo_Endereco = 1;
        estagiarioGravar.efetivo = new Efetivo();
        estagiarioGravar.efetivo.codigo_efetivo = 1;
        try
        {
            loading = true;
            string url = $"https://localhost:44388/Estagiario/Gravar";
            var response = await httpClient.PostAsJsonAsync(url, estagiarioGravar);
            if (response.IsSuccessStatusCode == true)
            {
                Estagiario estagiarioRetorno = JsonConvert.DeserializeObject<Estagiario>(await response.Content.ReadAsStringAsync());

                modal.Open("Funcionario cadastrado com sucesso", "Cadastrar funcionário", "PesquisaFuncionario");
            }
            else
            {
                modal.Open("Erro ao cadastrar o funcionario", "Cadastrar funcionário", "PesquisaFuncionario");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }

    }

    public async Task CadastrarEndereco()
    {
        string cookieEmpresa = await JSRuntime.InvokeAsync<string>("blazorExtensions.GetCookieEmpresa");
        Endereco enderecoGravar = new Endereco();
        enderecoGravar.rua = vmEfetivo.Endereco.rua;
        enderecoGravar.numero = vmEfetivo.Endereco.numero;
        enderecoGravar.bairro = vmEfetivo.Endereco.bairro;
        enderecoGravar.cidade = vmEfetivo.Endereco.cidade;
        enderecoGravar.uf = vmEfetivo.Endereco.uf;

        try
        {
            loading = true;
            string url = $"https://localhost:44388/Endereco/Gravar";
            var response = await httpClient.PostAsJsonAsync(url, enderecoGravar);
            if (response.IsSuccessStatusCode == true)
            {
                Endereco enderecoRetorno = JsonConvert.DeserializeObject<Endereco>(await response.Content.ReadAsStringAsync());
                vmEfetivo.Endereco.codigo_Endereco = enderecoRetorno.codigo_Endereco;
                vmEfetivo.Endereco.rua = enderecoRetorno.rua;
                vmEfetivo.Endereco.numero = enderecoRetorno.numero;
                vmEfetivo.Endereco.bairro = enderecoRetorno.bairro;
                vmEfetivo.Endereco.cidade = enderecoRetorno.cidade;
                vmEfetivo.Endereco.uf = enderecoRetorno.uf;

                modal.Open("Endereço cadastrado com sucesso", "Cadastrar endereço", "PesquisaFuncionario");
            }
            else
            {
                modal.Open("Erro ao cadastrar o endereço", "Cadastrar endereço", "PesquisaFuncionario");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    public async Task EditarEndereco()
    {

        Endereco enderecoEditar = new Endereco();
        enderecoEditar.rua = vmEfetivo.Endereco.rua;
        enderecoEditar.numero = vmEfetivo.Endereco.numero;
        enderecoEditar.bairro = vmEfetivo.Endereco.bairro;
        enderecoEditar.cidade = vmEfetivo.Endereco.cidade;
        enderecoEditar.uf = vmEfetivo.Endereco.uf;
        try
        {
            loading = true;
            string url = $"https://localhost:44388/Endereco/Atualizar";
            var response = await httpClient.PostAsJsonAsync(url, enderecoEditar);

            if (response.IsSuccessStatusCode)
            {
                Endereco enderecoRetorno = JsonConvert.DeserializeObject<Endereco>(await response.Content.ReadAsStringAsync());
                vmEfetivo.Endereco.codigo_Endereco = enderecoRetorno.codigo_Endereco;
                vmEfetivo.Endereco.rua = enderecoRetorno.rua;
                vmEfetivo.Endereco.numero = enderecoRetorno.numero;
                vmEfetivo.Endereco.bairro = enderecoRetorno.bairro;
                vmEfetivo.Endereco.cidade = enderecoRetorno.cidade;
                vmEfetivo.Endereco.uf = enderecoRetorno.uf;

                modal.Open("Endereço editado com sucesso", "Editar Endereço", "PesquisaFuncionario");
            }
            else
            {
                modal.Open("Erro ao editar o endereço", "Editar Endereço", "CadastroFuncionario");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    public async Task CarregarEndereco()
    {
        try
        {
            this.loading = true;
            string url = $"https://localhost:44388/Endereco/Carregar?pCodEndereco={codEndereco}";
            var response = await httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode == true)
            {
                Endereco enderecoRetorno = JsonConvert.DeserializeObject<Endereco>(await response.Content.ReadAsStringAsync());
                vmEfetivo.Endereco.codigo_Endereco = enderecoRetorno.codigo_Endereco;
                vmEfetivo.Endereco.rua = enderecoRetorno.rua;
                vmEfetivo.Endereco.numero = enderecoRetorno.numero;
                vmEfetivo.Endereco.bairro = enderecoRetorno.bairro;
                vmEfetivo.Endereco.cidade = enderecoRetorno.cidade;
                vmEfetivo.Endereco.uf = enderecoRetorno.uf;
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            this.loading = false;
            StateHasChanged();
        }
    }

    public async Task EditarEfetivo()
    {
        Efetivo efetivoEditar = new Efetivo();
        efetivoEditar.codigo_efetivo = int.Parse(vmEfetivo.Codigo_Efetivo);
        efetivoEditar.nome = vmFuncionario.Nome;
        efetivoEditar.cpf = vmFuncionario.Cpf;
        efetivoEditar.email = vmFuncionario.Email;
        efetivoEditar.data_Nascimento = vmFuncionario.Data_Nascimento;
        efetivoEditar.cargo = vmEfetivo.Cargo;
        efetivoEditar.empresa = vmEfetivo.Empresa;
        efetivoEditar.endereco = vmEfetivo.Endereco;

        try
        {
            loading = true;
            string url = $"https://localhost:44388/Efetivo/Atualizar";
            var response = await httpClient.PostAsJsonAsync(url, efetivoEditar);

            if (response.IsSuccessStatusCode == true)
            {
                Efetivo efetivoRetorno = JsonConvert.DeserializeObject<Efetivo>(await response.Content.ReadAsStringAsync());
                vmEfetivo.Codigo_Efetivo = efetivoRetorno.codigo_efetivo.ToString();
                vmFuncionario.Nome = efetivoRetorno.nome;
                vmFuncionario.Cpf = efetivoRetorno.cpf;
                vmFuncionario.Email = efetivoRetorno.email;
                vmFuncionario.Data_Nascimento = efetivoRetorno.data_Nascimento;
                vmEfetivo.Cargo = efetivoRetorno.cargo;
                vmEfetivo.Empresa = efetivoRetorno.empresa;
                vmEfetivo.Endereco = efetivoRetorno.endereco;
                modal.Open("Funcionario editado com sucesso", "Editar Funcionário", "PesquisaFuncionario");
            }
            else
            {
                modal.Open("Erro ao editar o funcionario", "Editar Funcionário", "CadastroFuncionario");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = true;
            StateHasChanged();
        }
    }

    public async Task EditarEstagiario()
    {

        Estagiario estagiarioEditar = new Estagiario();
        estagiarioEditar.codigo_Estagiario = int.Parse(vmEstagiario.Codigo_Estagiario);
        estagiarioEditar.nome = vmFuncionario.Nome;
        estagiarioEditar.cpf = vmFuncionario.Cpf;
        estagiarioEditar.email = vmFuncionario.Email;
        estagiarioEditar.data_Nascimento = vmFuncionario.Data_Nascimento;
        estagiarioEditar.nome_curso = vmEstagiario.Nome_Curso;
        estagiarioEditar.data_Inicio_Curso = vmEstagiario.Data_Inicio_Curso;
        estagiarioEditar.empresa = vmEstagiario.Empresa;
        estagiarioEditar.endereco = vmEstagiario.Endereco;
        estagiarioEditar.efetivo = vmEstagiario.Efetivo;
        try
        {
            loading = true;
            string url = $"https://localhost:44388/Estagiario/Atualizar";
            var response = await httpClient.PostAsJsonAsync(url, estagiarioEditar);

            if (response.IsSuccessStatusCode)
            {
                Estagiario estagiarioRetorno = JsonConvert.DeserializeObject<Estagiario>(await response.Content.ReadAsStringAsync());
                vmEstagiario.Codigo_Estagiario = estagiarioRetorno.codigo_Estagiario.ToString();
                vmFuncionario.Nome = estagiarioRetorno.nome;
                vmFuncionario.Cpf = estagiarioRetorno.cpf;
                vmFuncionario.Email = estagiarioRetorno.email;
                vmFuncionario.Data_Nascimento = estagiarioRetorno.data_Nascimento;
                vmEstagiario.Nome_Curso = estagiarioRetorno.nome_curso;
                vmEstagiario.Data_Inicio_Curso = estagiarioRetorno.data_Inicio_Curso;
                vmEstagiario.Empresa = estagiarioRetorno.empresa;
                vmEstagiario.Endereco = estagiarioRetorno.endereco;
                vmEstagiario.Efetivo = estagiarioRetorno.efetivo;
                modal.Open("Funcionario editado com sucesso", "Editar Funcionário", "PesquisaFuncionario");
            }
            else
            {
                modal.Open("Erro ao editar o funcionario", "Editar Funcionário", "CadastroFuncionario");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    public async Task CarregarEfetivo()
    {
        try
        {
            this.loading = true;
            string url = $"https://localhost:44388/Efetivo/Carregar?pCodEfetivo={codFuncionario}";
            var response = await httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode == true)
            {
                Efetivo efetivoRetorno = JsonConvert.DeserializeObject<Efetivo>(await response.Content.ReadAsStringAsync());
                vmEfetivo.Codigo_Efetivo = efetivoRetorno.codigo_efetivo.ToString();
                vmFuncionario.Nome = efetivoRetorno.nome;
                vmFuncionario.Cpf = efetivoRetorno.cpf;
                vmFuncionario.Email = efetivoRetorno.email;
                vmFuncionario.Data_Nascimento = efetivoRetorno.data_Nascimento;
                vmEfetivo.Cargo = efetivoRetorno.cargo;
                vmEfetivo.Empresa = efetivoRetorno.empresa;
                vmEfetivo.Endereco = efetivoRetorno.endereco;
                tipoFuncionario = "efetivo";

            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            this.loading = false;
            StateHasChanged();
        }
    }

    public async Task CarregarEstagiario()
    {
        try
        {
            loading = true;
            string url = $"https://localhost:44388/Estagiario/Carregar?pCodEstagiario={codFuncionario}";
            var response = await httpClient.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                Estagiario estagiarioRetorno = JsonConvert.DeserializeObject<Estagiario>(await response.Content.ReadAsStringAsync());
                vmEstagiario.Codigo_Estagiario = estagiarioRetorno.codigo_Estagiario.ToString();
                vmFuncionario.Nome = estagiarioRetorno.nome;
                vmFuncionario.Cpf = estagiarioRetorno.cpf;
                vmFuncionario.Email = estagiarioRetorno.email;
                vmFuncionario.Data_Nascimento = estagiarioRetorno.data_Nascimento;
                vmEstagiario.Nome_Curso = estagiarioRetorno.nome_curso;
                vmEstagiario.Data_Inicio_Curso = estagiarioRetorno.data_Inicio_Curso;
                vmEstagiario.Empresa = estagiarioRetorno.empresa;
                vmEstagiario.Endereco = estagiarioRetorno.endereco;
                vmEstagiario.Efetivo = estagiarioRetorno.efetivo;
                tipoFuncionario = "estagiario";

            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            this.loading = false;
            StateHasChanged();
        }
        {

        }
    }

    public async Task ExcluirEfetivo()
    {

        try
        {
            string url = $"https://localhost:44388/Efetivo/Excluir?pCodEfetivo={vmEfetivo.Codigo_Efetivo}";
            var response = await httpClient.DeleteAsync(url);

            if (response.IsSuccessStatusCode == true)
            {
                modal.Open("Funcionário excluído com sucesso", "Excluir Efetivo", "PesquisaFuncionario");
            }
            else
            {
                modal.Open("Erro ao excluir o funcionário", "Excluir Efetivo", "PesquisaFuncionario");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            StateHasChanged();
        }
    }


}
