@page "/CadastroFuncionario"
@page "/CadastroFuncionario/{codFuncionario}"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@using System.Text
@using Negocio.Cadastro
@using Projeto_Contabilidade.Client.Pages.funcionario
@using Projeto_Contabilidade.Client.Componentes.Steper
@using Projeto_Contabilidade.Client.Componentes.Input
@using Projeto_Contabilidade.Client.Componentes.Modal
@using Newtonsoft.Json

<div class="card">
    <h4 class="card-header">@formTitle</h4>
    <div class="card-body">
        <EditForm Model="vmFuncionario">
            <Steper>
                <Step Text="Informações Gerais" Icon="oi-info" Value="Step1" Enabled="@IsEnabled">
                    <div class="form__div">
                        <h3 class="form__title">
                            Informações Gerais
                        </h3>
                        <div class="form__inputs">
                            <div class="field__control">
                                <label>Nome</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmFuncionario.Nome"></InputText>
                            </div>
                            <div class="field__control">
                                <label>CPF</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmFuncionario.Cpf"></InputText>
                            </div>
                            <div class="field__control">
                                <label>E-Mail</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmFuncionario.Email"></InputText>
                            </div>
                            <div class="field__control">
                                <label>Data Nascimento</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmFuncionario.DataNascimento"></InputText>
                            </div>
                            <div class="field__control">
                                <label>Tipo</label>
                                <InputSelect class="field__input field__input--active" @bind-Value="tipoFuncionario">
                                    <option value="efetivo">Efetivo</option>
                                    <option value="estagiario">Estágiario</option>
                                </InputSelect>
                            </div>
                            @if (tipoFuncionario == "estagiario")
                            {
                                <div class="field__control">
                                    <label>Nome do curso</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmEstagiario.nomeCurso"></InputText>
                                </div>
                                <div class="field__control">
                                    <label>Data do inicio do curso</label>
                                    <InputText class="field__input field__input--active" @bind-Value="vmEstagiario.dataInicioCurso"></InputText>
                                </div>
                            }
                        </div>
                    </div>
                </Step>
                <Step Text="Informações de Endereço" Icon="oi-location" Value="Step2" Enabled="@IsEnabled">
                    <div class="form__div">
                        <h3 class="form__title">
                            Informações De Endereço
                        </h3>
                        <div class="form__inputs">
                            <div class="field__control">
                                <label>Rua</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmFuncionario.Rua"></InputText>
                            </div>
                            <div class="field__control">
                                <label>Número</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmFuncionario.Numero"></InputText>
                            </div>
                            <div class="field__control">
                                <label>Bairro</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmFuncionario.Bairro"></InputText>
                            </div>
                            <div class="field__control">
                                <label>Cidade</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmFuncionario.NomeCidade"></InputText>
                            </div>
                        </div>
                    </div>
                </Step>
            </Steper>
            <div class="form__buttons">
                <button class="btn btn-lg btn-outline-danger">
                    Excluir
                </button>
                <button class="btn btn-lg btn-outline-primary">
                    Limpar
                </button>

                <button class="btn btn-lg btn-outline-primary">
                    @if (string.IsNullOrWhiteSpace(vmFuncionario.CodFuncionario) == false)
                    {
                        <div>Editar</div>
                    }
                    else
                    {
                        <div>Gravar</div>
                    }
                </button>

            </div>
        </EditForm>
    </div>

    <Modal @ref="modal"></Modal>

</div>
@code {

    [Parameter]
    public string codFuncionario { get; set; }
    FuncionarioViewModel vmFuncionario = new FuncionarioViewModel();
    EstagionarioViewModel vmEstagiario = new EstagionarioViewModel();

    private Modal modal { get; set; }
    public bool IsEnabled = true;
    private string tipoFuncionario { get; set; }
    private string formTitle = "Cadastro Funcionário";
    private bool loading = false;

    protected override void OnInitialized()
    {
        if (codFuncionario != null)
        {
            formTitle = "Editar Funcionário";
        }
    }

    public async Task Gravar()
    {
        if (string.IsNullOrWhiteSpace(vmFuncionario.CodFuncionario) == true)
        {
            await CadastrarFuncionario();
        }
        else
        {
            await EditarFuncionario();
        }
    }

    public async Task CadastrarFuncionario()
    {
        //Funcionario funcionarioGravar = new Funcionario();


        //try
        //{
        //    string url = $"https://localhost:44388/Funcionario/Gravar";
        //    var response = await httpClient.PostAsJsonAsync(url, funcionarioGravar);
        //    if (response.IsSuccessStatusCode == true)
        //    {
        //        funcionario funcionarioRetorno = JsonConvert.DeserializeObject<Funcionario>(await response.Content.ReadAsStringAsync());
        //        modal.Open("Funcionario gravado com sucesso", "CadastroFuncionario");
        //    }
        //    else
        //    {
        //        modal.Open("Erro ao gravar o Funcionario", "CadastroFuncionario");
        //    }
        //}
        //catch (InvalidOperationException ex)
        //{
        //    throw new InvalidOperationException(ex.Message);
        //}
        //finally
        //{
        //    StateHasChanged();
        //}

    }

    public async Task EditarFuncionario()
    {
        //Funcionario funcionarioEditar = new Funcionario();

        //try
        //{
        //    string url = $"https://localhost:44388/Funcionario/Editar";
        //    var response = await httpClient.PostAsJsonAsync(url, funcionarioEditar);

        //    if (response.IsSuccessStatusCode == true)
        //    {
        //        funcionario funcionarioRetorno = JsonConvert.DeserializeObject<Funcionario>(await response.Content.ReadAsStringAsync());
        //        modal.Open("Funcionario editado com sucesso", "PesquisaFuncionario");
        //    }
        //    else
        //    {
        //        modal.Open("Erro ao gravar o Funcionario", "CadastroFuncionario");
        //    }
        //}
        //catch (InvalidOperationException ex)
        //{
        //    throw new InvalidOperationException(ex.Message);
        //}
        //finally
        //{
        //    StateHasChanged();
        //}
    }

    private async Task CarregarFuncionario()
    {

        //try
        //{
        //    this.loading = true;
        //    string url = $"https://localhost:44388/Funcionario/Carregar?pCodFuncionario={codFuncionario}";
        //    var response = await httpClient.GetAsync(url);
        //    if (response.IsSuccessStatusCode == true)
        //    {
        //        Funcionario funcionarioRetorno = JsonConvert.DeserializeObject<Funcionario>(await response.Content.ReadAsStringAsync());


        //    }
        //}
        //catch (InvalidOperationException ex)
        //{
        //    throw new InvalidOperationException(ex.Message);
        //}
        //finally
        //{
        //    this.loading = false;
        //    StateHasChanged();
        //}
    }


    public async Task Excluir()
    {

        try
        {
            string url = $"https://localhost:44388/Funcionario/Excluir?pCodFuncionario={vmFuncionario.CodFuncionario}";
            var response = await httpClient.DeleteAsync(url);

            if (response.IsSuccessStatusCode == true)
            {
                modal.Open("Funcionário excluído com sucesso", "PesquisaFuncionario");
            }
            else
            {
                modal.Open("Erro ao excluir o funcionário", "PesquisaFuncionario");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            StateHasChanged();
        }
    }


    class EstagionarioViewModel
    {
        public string codEstagiario { get; set; }
        public string nomeCurso { get; set; }
        public string dataInicioCurso { get; set; }
    }



}
