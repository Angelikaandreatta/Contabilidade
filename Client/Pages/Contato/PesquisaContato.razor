@page "/PesquisaContato"
@using Negocio.Cadastro
@using Projeto_Contabilidade.Client.Componentes.Modal
@inject HttpClient httpClient
@inject NavigationManager NavigationManager;
@using Newtonsoft.Json

@if (loading)
{
    <h3 class="text-center">CARREGANDO ...</h3>
}
else
{
    <div class="d-flex w-100 justify-content-between">
        <h2 class="">Contatos Cadastrados</h2>
        <div style="width:250px" class="d-flex form-control">
            <span class="oi oi-magnifying-glass"></span>
            <input style="outline:0" type="text" placeholder="Pesquisa" class="w-100 h-100 border-0" />
        </div>
    </div>

    <table class="table table-hover">
        <tr>
            <th>Nome</th>
            <th>Email</th>
            <th>Telefone</th>
            <th>Setor</th>
            <th>
                Ações
            </th>
        </tr>
        <tbody>
            @foreach (ContatoViewModel contato in contatos)
            {
                <tr>
                    <td>@contato.Nome_Contato</td>
                    <td>@contato.Email</td>
                    <td>@contato.Telefone</td>
                    <td>@contato.Setor</td>
                    <td>
                        <div>
                            <button @onclick=@(() => NavigationManager.NavigateTo($"CadastroContato/{contato.Cod_Contato}")) type="button" class="btn btn-outline-success">
                                Editar
                            </button>
                            <button @onclick="@(() => ExcluirContato(contato.Cod_Contato))" type="button" class="btn btn-outline-danger">Deletar</button>
                        </div>
                    </td>
                </tr>
            }
            <tr>
                <td colspan=4 class="text-center">
                    <button class="btn btn-outline-primary"
                        @onclick=@(() => NavigationManager.NavigateTo("CadastroContato"))>
                        Adicionar Contato
                    </button>
                </td>
            </tr>
        </tbody>
    </table>
}

<Modal @ref="modal"></Modal>

@code {
    public Contato contTemp = new Contato();
    public bool loading = false;
    List<ContatoViewModel> contatos = new List<ContatoViewModel>();
    Modal modal = new Modal();


    async protected override Task OnInitializedAsync()
    {
        await listarContato();
        StateHasChanged();
    }

    protected async Task listarContato()
    {
        try
        {
            loading = true;
            string url = $"https://localhost:44388/Contato/Listar";
            var response = await httpClient.PostAsJsonAsync(url, contTemp);
            if (response.IsSuccessStatusCode == true)
            {
                List<Contato> contatosRetorno = JsonConvert.DeserializeObject<List<Contato>>(await response.Content.ReadAsStringAsync());

                contatos.RemoveRange(0, contatos.Count);
                foreach (Contato contatoRetorno in contatosRetorno)
                {
                    ContatoViewModel contato = new ContatoViewModel();
                    contato.Cod_Contato = contatoRetorno.cod_Contato.ToString();
                    contato.Cliente = new vmCliente();
                    contato.Cliente.Codigo_Cliente = contatoRetorno.cliente.codigo_Cliente;
                    contato.Nome_Contato = contatoRetorno.nome;
                    contato.Email = contatoRetorno.email;
                    contato.Telefone = contatoRetorno.telefone;
                    contato.Setor = contatoRetorno.setor;

                    contatos.Add(contato);
                }

            }

        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
        }
    }

    protected async Task ExcluirContato(string codContato)
    {
        try
        {
            Contato contatoExcluir = new Contato();
            string url = $"https://localhost:44388/Contato/Excluir?pCodContato={codContato}";
            var response = await httpClient.DeleteAsync(url);

            if (response.IsSuccessStatusCode == true)
            {
                await listarContato();
                modal.Open("Contato excluído com sucesso", "PesquisaContato");

            }
            else
            {
                modal.Open("Erro ao excluir o contato", "PesquisaContato");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }
 }

