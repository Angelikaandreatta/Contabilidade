@page "/CadastroContato/{codContato?}"
@inject HttpClient httpClient
@using Projeto_Contabilidade.Client.Componentes.Modal
@using Projeto_Contabilidade.Client.Pages.cliente
@using Projeto_Contabilidade.Client.Pages.Contato
@using Negocio.Cadastro
@using Projeto_Contabilidade.Client.Componentes.Steper
@using Newtonsoft.Json

@if (loading)
{
    <h3>CARREGANDO ...</h3>
}
else
{
    <div class="card">
        <h4 class="card-header">@formTitle</h4>
        <div class="card-body">
            <EditForm Model="vmContato">
                <Steper>
                    <Step Icon="oi-info" Text="Informações Gerais" Value="Step1" Enabled="IsEnabled">
                        <div class="form__div">
                            <h3 class="form__title">
                                Informações Gerais
                            </h3>
                            <div class="form__inputs">
                                <div class="field__control">
                                    <label>Cliente</label>
                                    <InputSelect @onclick=@(() => Console.WriteLine(@vmContato.Cliente.Codigo_Cliente)) class="field__input" @bind-Value="vmContato.Cliente.Codigo_Cliente">
                                        @if (clientes.Count > 0)
                                        {
                                        <option value="0">Selecione</option>
                                        @foreach (ClienteViewModel cliente in clientes)
                                            {
                                            <option value="@cliente.Codigo_Cliente">@($"{cliente.Codigo_Cliente} - {cliente.Razao_Social}")</option>
                                            }
                                        }
                                </InputSelect>
                            </div>
                            <div class="field__control">
                                <label>Nome</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmContato.Nome_Contato"></InputText>
                            </div>

                            <div class="field__control">
                                <label>Email</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmContato.Email"></InputText>
                            </div>

                            <div class="field__control">
                                <label>Telefone</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmContato.Telefone"></InputText>
                            </div>

                            <div class="field__control">
                                <label>Setor</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmContato.Setor"></InputText>
                            </div>
                        </div>
                    </div>
                </Step>
            </Steper>
            <div class="form__buttons">
                <button @onclick="Excluir" class="btn btn-lg btn-outline-danger ">
                    Excluir
                </button>
                <button @onclick="LimparTelaContato" class="btn btn-lg btn-outline-primary">
                    Limpar
                </button>

                <button @onclick="Gravar" class="btn btn-lg btn-outline-primary">
                    @if (string.IsNullOrWhiteSpace(vmContato.Cod_Contato) == false)
                        {
                            <div>Editar</div>
                        }
                        else
                        {
                            <div>Gravar</div>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
        <Modal @ref="modal"></Modal>
    </div>
}

@code {
    [Parameter] public string codContato { get; set; }
    ContatoViewModel vmContato = new ContatoViewModel();
    private Modal modal = new Modal();
    private string formTitle = "Cadastro de Contato";
    public bool loading = false;
    public bool IsEnabled = true;

    public Cliente clientTemp = new Cliente();
    List<ClienteViewModel> clientes = new List<ClienteViewModel>();

    async protected override Task OnInitializedAsync()
    {
        await ListarCliente();
    }

    protected override void OnInitialized()
    {
        if (codContato != null)
        {
            formTitle = "Editar Contato";
        }
    }

    protected override async void OnParametersSet()
    {
        if (codContato != null)
        {
            await CarregarContato();
        }
    }

    public async Task Gravar()
    {
        if (string.IsNullOrWhiteSpace(vmContato.Cod_Contato) == true)
        {
            await CadastrarContato();
        }
        else
        {
            await EditarContato();
        }
    }

    protected async Task ListarCliente()
    {
        try
        {
            loading = true;
            string url = $"https://localhost:44388/Cliente/Listar";
            var response = await httpClient.PostAsJsonAsync(url, clientTemp);
            if (response.IsSuccessStatusCode == true)
            {
                List<Cliente> clientesRetorno = JsonConvert.DeserializeObject<List<Cliente>>(await response.Content.ReadAsStringAsync());
                clientes.RemoveRange(0, clientes.Count);
                foreach (Cliente clienteRetorno in clientesRetorno)
                {
                    ClienteViewModel cliente = new ClienteViewModel();
                    cliente.Codigo_Cliente = clienteRetorno.codigo_Cliente.ToString();
                    cliente.Razao_Social = clienteRetorno.razao_Social;
                    cliente.Cnpj = clienteRetorno.cnpj;
                    cliente.Qtd_Empregado = clienteRetorno.qtd_Empregado;
                    cliente.Endereco = new Endereco();
                    cliente.Endereco.codigo_Endereco = clienteRetorno.endereco.codigo_Endereco;

                    clientes.Add(cliente);
                }
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task EditarContato()
    {
        loading = true;
        Contato contatoEditar = new Contato();
        contatoEditar.cod_Contato = int.Parse(vmContato.Cod_Contato);
        contatoEditar.nome = vmContato.Nome_Contato;
        contatoEditar.email = vmContato.Email;
        contatoEditar.telefone = vmContato.Telefone;
        contatoEditar.setor = vmContato.Setor;

        if (vmContato.Cliente.Codigo_Cliente == 0)
        {
            modal.Open("Selecione o contato", "Cadastrar Contato", "CadastroContato");
        }
        else
        {
            contatoEditar.cliente = new Cliente();
            contatoEditar.cliente.codigo_Cliente = vmContato.Cliente.Codigo_Cliente;

            try
            {
                string url = $"https://localhost:44388/Contato/Atualizar";

                var response = await httpClient.PostAsJsonAsync(url, contatoEditar);


                if (response.IsSuccessStatusCode == true)
                {
                    Contato contatoRetorno = JsonConvert.DeserializeObject<Contato>(await response.Content.ReadAsStringAsync());
                    vmContato.Cod_Contato = contatoRetorno.cod_Contato.ToString();
                    vmContato.Cliente = new vmCliente();
                    vmContato.Cliente.Codigo_Cliente = contatoRetorno.cliente.codigo_Cliente;
                    vmContato.Nome_Contato = contatoRetorno.nome;
                    vmContato.Email = contatoRetorno.email;
                    vmContato.Telefone = contatoRetorno.telefone;
                    vmContato.Setor = contatoRetorno.setor;

                    modal.Open("Contato editado com sucesso", "Editar Contato", "PesquisaContato");
                }
                else
                {
                    modal.Open("Erro ao editar o Contato", "Editar Contato", "CadastroContato");
                }
            }
            catch (InvalidOperationException ex)
            {
                throw new InvalidOperationException(ex.Message);
            }
            finally
            {
                loading = false;
                StateHasChanged();
            }
        }
    }

    private async Task CadastrarContato()
    {
        loading = true;
        Contato contatoGravar = new Contato();
        contatoGravar.nome = vmContato.Nome_Contato;
        contatoGravar.email = vmContato.Email;
        contatoGravar.telefone = vmContato.Telefone;
        contatoGravar.setor = vmContato.Setor;

        if (vmContato.Cliente.Codigo_Cliente == 0)
        {
            modal.Open("Selecione o cliente", "Cadastrar Contato", "CadastroContato");
        }
        else
        {
            contatoGravar.cliente = new Cliente();
            contatoGravar.cliente.codigo_Cliente = vmContato.Cliente.Codigo_Cliente;

            try
            {
                string url = $"https://localhost:44388/Contato/Gravar";
                var response = await httpClient.PostAsJsonAsync(url, contatoGravar);
                if (response.IsSuccessStatusCode == true)
                {
                    Contato contatoRetorno = JsonConvert.DeserializeObject<Contato>(await response.Content.ReadAsStringAsync());
                    vmContato.Cod_Contato = contatoRetorno.cod_Contato.ToString();
                    vmContato.Cliente = new vmCliente();
                    vmContato.Cliente.Codigo_Cliente = contatoRetorno.cliente.codigo_Cliente;
                    vmContato.Nome_Contato = contatoRetorno.nome;
                    vmContato.Email = contatoRetorno.email;
                    vmContato.Telefone = contatoRetorno.telefone;
                    vmContato.Setor = contatoRetorno.setor;
                    modal.Open("Contato gravado com sucesso", "Cadastrar Contato", "PesquisaContato");

                }
                else
                {
                    modal.Open("Erro ao gravar o Contato", "Cadastrar Contato", "CadastroContato");
                }
            }
            catch (InvalidOperationException ex)
            {
                throw new InvalidOperationException(ex.Message);
            }
            finally
            {
                loading = false;
                StateHasChanged();
            }
        }
    }

    private async Task Excluir()
    {
        try
        {
            Contato contatoExcluir = new Contato();
            string url = $"https://localhost:44388/Contato/Excluir?pCodContato={vmContato.Cod_Contato}";
            var response = await httpClient.DeleteAsync(url);

            if (response.IsSuccessStatusCode == true)
            {
                LimparTelaContato();
                modal.Open("Contato excluído com sucesso", "Excluir Contato", "PesquisaContato");

            }
            else
            {
                modal.Open("Erro ao excluir o contato", "Excluir Contato", "PesquisaContato");
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task CarregarContato()
    {
        try
        {
            loading = true;
            string url = $"https://localhost:44388/Contato/Carregar?pCodContato={codContato}";
            var response = await httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode == true)
            {
                Contato contatoRetorno = JsonConvert.DeserializeObject<Contato>(await response.Content.ReadAsStringAsync());
                vmContato.Cod_Contato = contatoRetorno.cod_Contato.ToString();
                vmContato.Cliente = new vmCliente();
                vmContato.Cliente.Codigo_Cliente = contatoRetorno.cliente.codigo_Cliente;
                vmContato.Nome_Contato = contatoRetorno.nome;
                vmContato.Email = contatoRetorno.email;
                vmContato.Telefone = contatoRetorno.telefone;
                vmContato.Setor = contatoRetorno.setor;
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
        finally
        {
            this.loading = false;
            StateHasChanged();
        }
    }

    public void LimparTelaContato()
    {
        vmContato.Cliente.Codigo_Cliente = 0;
        vmContato.Nome_Contato = "";
        vmContato.Email = "";
        vmContato.Telefone = "";
        vmContato.Setor = "";
    }
}
