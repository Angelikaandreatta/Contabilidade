@page "/CadastroContato/{codContato?}"
@inject HttpClient httpClient
@using Projeto_Contabilidade.Client.Pages.cliente
@using Projeto_Contabilidade.Client.Pages.Contato
@using Negocio.Cadastro
@using Projeto_Contabilidade.Client.Componentes.Steper
@using Newtonsoft.Json

<div class="card">
    <h4 class="card-header">Cadastro de Contato</h4>
    <div class="card-body">

        <EditForm Model="vmContato">
            <Steper>
                <Step Icon="oi-info" Text="Informações Gerais" Value="Step1" Enabled="IsEnabled">
                    <div class="form__div">
                        <h3 class="form__title">
                            Informações Gerais
                        </h3>
                        <div class="form__inputs">
                            <div class="field__control">
                                <label>Cliente</label>
                                <InputSelect class="field__input" @bind-Value="vmContato.Cliente.Codigo_Cliente">
                                    @if (clientes.Count > 0)
                                    {
                                        @foreach (ClienteViewModel cliente in clientes)
                                        {
                                            <option>@($"{cliente.Codigo_Cliente} - {cliente.Razao_Social}")</option>
                                        }
                                    }
                                </InputSelect>
                            </div>

                            <div class="field__control">
                                <label>Nome</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmContato.Nome_Contato"></InputText>
                            </div>

                            <div class="field__control">
                                <label>Email</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmContato.Email"></InputText>
                            </div>

                            <div class="field__control">
                                <label>Telefone</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmContato.Telefone"></InputText>
                            </div>

                            <div class="field__control">
                                <label>Setor</label>
                                <InputText class="field__input field__input--active" @bind-Value="vmContato.Setor"></InputText>
                            </div>

                        </div>
                    </div>
                </Step>
            </Steper>
            <div class="form__buttons">
                <button class="btn btn-lg btn-outline-danger">
                    Excluir
                </button>
                <button class="btn btn-lg btn-outline-primary">
                    Limpar
                </button>
                @if (string.IsNullOrWhiteSpace(vmContato.Cod_Contato) == true)
                {
                    <button class="btn btn-lg btn-outline-primary">
                        Gravar
                    </button>
                }
                else
                {
                    <button class="btn btn-lg btn-outline-primary">
                        Editar
                    </button>
                }
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public string codContato { get; set; }
    public Cliente clientTemp = new Cliente();
    ContatoViewModel vmContato = new ContatoViewModel();
    List<ClienteViewModel> clientes = new List<ClienteViewModel>();

    public bool IsEnabled = true;

    async protected override Task OnInitializedAsync()
    {
        await ListarCliente();
    }

    protected async Task ListarCliente()
    {
        try
        {
            string url = $"https://localhost:44388/Cliente/Listar";
            var response = await httpClient.PostAsJsonAsync(url, clientTemp);
            if (response.IsSuccessStatusCode == true)
            {
                List<Cliente> clientesRetorno = JsonConvert.DeserializeObject<List<Cliente>>(await response.Content.ReadAsStringAsync());
                clientes.RemoveRange(0, clientes.Count);
                foreach (Cliente clienteRetorno in clientesRetorno)
                {
                    ClienteViewModel cliente = new ClienteViewModel();
                    cliente.Codigo_Cliente = clienteRetorno.codigo_Cliente.ToString();
                    cliente.Razao_Social = clienteRetorno.razao_Social;
                    cliente.Cnpj = clienteRetorno.cnpj;
                    cliente.Qtd_Empregado = clienteRetorno.qtd_Empregado;
                    cliente.Endereco = new Endereco();
                    cliente.Endereco.codigo_Endereco = clienteRetorno.endereco.codigo_Endereco;

                    clientes.Add(cliente);
                }
            }
        }
        catch (InvalidOperationException ex)
        {
            throw new InvalidOperationException(ex.Message);
        }
    }
}
