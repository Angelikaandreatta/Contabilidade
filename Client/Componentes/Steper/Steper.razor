@inject NavigationManager NavigationManager

<CascadingValue Value="this">
    <div class="steper">
        <div class="step">
            @foreach (Step stepPage in Steps)
            {
                <div class="step__info " @onclick=@( () => ActivateStep(stepPage) )>
                    <div class="step__icon @GetStepCSS(stepPage)">
                        <span class="oi @stepPage.Icon"></span>
                    </div>
                    <div class="step__describe">
                        @stepPage.Text
                    </div>
                </div>
                <hr class="step__divider">
            }
        </div>
        <div class="tab-content">
            @ChildContent
            <div class="step__line__button @(Steps.Count > 0 && ActiveStep != Steps[0] ? "justify-content-start" : "")">
                @if (Steps.Count > 0)
                {
                    @if (ActiveStep != Steps[0])
                    {
                        <button @onclick=@(() => PreviousStep()) class="button button--normal button--action">
                            Voltar
                        </button>
                    }
                    else
                    {

                        <button @onclick=@(() => NextStep()) class="button button--normal button--action">
                            Proximo
                        </button>

                    }
                }

            </div>
        </div>
    </div>
</CascadingValue>

@code {
    private int index = 1;
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public EventCallback<Step> OnStepChanged { get; set; }
    public Step ActiveStep { get; set; }
    List<Step> Steps = new List<Step>();

    internal void AddStep(Step stepPage)
    {
        Steps.Add(stepPage);
        if (Steps.Count == 1)
            ActiveStep = stepPage;

        StateHasChanged();
    }

    string GetStepCSS(Step step)
    {
        if (!step.Enabled)
            return "";

        return step == ActiveStep ? "step__icon--active" : "";
    }

    void ActivateStep(Step step)
    {

        if (step.Enabled)
        {
            ActiveStep = step;
            OnStepChanged.InvokeAsync(step);
        }
    }

    void PreviousStep()
    {
        int index = 0;
        foreach (Step step in Steps)
        {
            if (step == ActiveStep && step != Steps[0])
            {
                ActivateStep(Steps[index - 1]);
            }
            index++;
        }
    }
    void NextStep()
    {
        int index = 0;
        foreach (Step step in Steps)
        {
            if (step == ActiveStep && step != Steps[Steps.Count - 1])
            {
                ActivateStep(Steps[index + 1]);
            }
            index++;
        }

    }


}
